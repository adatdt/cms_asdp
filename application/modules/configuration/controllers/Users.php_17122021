<?php
defined ( 'BASEPATH' ) or exit ( 'No direct script access allowed' );

/**
 * ------------------
 * CLASS NAME : Users
 * ------------------
 *
 * @author     Robai <robai.rastim@gmail.com>
 * @copyright  2018
 *
 */

class Users extends MY_Controller {
	public function __construct() {
		parent::__construct();
        logged_in();
        $this->load->model('users_model');
        $this->load->library(array('bcrypt'));

        $this->_table     = 'core.t_mtr_user';
        $this->_username  = $this->session->userdata('username');
        $this->_module    = 'configuration/users';
	}

    public function index(){
        checkUrlAccess(uri_string(),'view');
        
        $data = array(
            'home'       => 'Home',
            'url_home'   => site_url('home'),
            'parent'     => 'Konfigurasi Sistem',
            'url_parent' => '#',
            'title'      => 'User',
            'content'    => 'users/index',
            'user_group' => $this->users_model->select_data("core.t_mtr_user_group","where status not in (-5) order by name asc")->result(),
            'btn_excel'=>checkBtnAccess($this->_module,'download_excel'),
            'btn_add'    => generate_button_new($this->_module, 'add',  site_url($this->_module.'/add'))
        );

        $this->load->view ('default', $data);
    }

    public function ajaxlist_user() {
        if($this->input->is_ajax_request()){
            $rows = $this->users_model->userList();
            echo json_encode($rows);
            exit;
        }
    }

    public function add(){
        validate_ajax();
        // $data['user_group'] = $this->dropdown_user_group();
        $data['title']      = 'Tambah User';
        $data['user_group'] = $this->users_model->select_data("core.t_mtr_user_group","where status=1 order by name asc")->result();
        $data['port']=$this->users_model->select_data("app.t_mtr_port","where status=1 order by name asc")->result();
        $this->load->view($this->_module.'/add',$data);
    }

    public function edit($param){
        validate_ajax();
        $data['id']         = $param;
        $data['user_group'] = $this->dropdown_user_group();
        $data['row']        = $this->global_model->selectById($this->_table, 'id', $this->enc->decode($param));
        $data['port']=$this->users_model->select_data("app.t_mtr_port","where status=1 order by name asc")->result();
        $data['title']      = 'Edit User';
        $this->load->view($this->_module.'/edit',$data);
    }

    public function reset_password($param){
        validate_ajax();
        $data['id']    = $param;
        $data['title'] = 'Ganti Password';

        $this->load->view($this->_module.'/reset_password',$data);
    }

    public function action_add(){
        validate_ajax();
        $post = $this->input->post();

        /* validation */
        $this->form_validation
            ->set_rules('first_name', 'Nama Depan', 'trim|required')
            // ->set_rules('last_name', 'Nama Belakang', 'trim|required')
            ->set_rules('username', 'Username', 'trim|required')
            // ->set_rules('password', 'Password', 'trim|required')
            // ->set_rules('phone', 'No Handphone', 'trim|required')
            // ->set_rules('email', 'Email', 'trim|required')
            ->set_rules('user_group', 'User Grup', 'trim|required') 
            ->set_rules('port', 'Pelabuhan ', 'trim|required');

        $this->form_validation->set_message('required','%s harus diisi!');
        $set_pass="admin123";

        /* data post */
        $post['port']=='all'?$dataport=null:$dataport=$this->enc->decode($post['port']);

        $first_name=$this->input->post('first_name');
        $last_name=$this->input->post('last_name'); 
        $username =trim($this->input->post('username'));
        $user_group_id = $this->enc->decode($this->input->post('user_group'));
        $phone = $this->input->post('phone');
        $email =$this->input->post('email'); 
        $admin_pannel_login=$this->input->post('login_cms');
        $pos_login=$this->input->post('login_pos');
        $validator_login=$this->input->post('login_validator');
        $e_ktp_reader_login=$this->input->post('login_ektp_reader');
        $cs_login=$this->input->post('login_cs'); 
        // $password= $this->bcrypt->hash_password(strtoupper(md5($this->input->post('$password'))));
        $password= $this->bcrypt->hash_password(strtoupper(md5($set_pass)));

        $data = array(
            'first_name' => $first_name, 
            'last_name' => $last_name, 
            'username' => strtolower($username), 
            'user_group_id' =>$user_group_id,
            'phone' => $phone, 
            'email' => $email, 
            'admin_pannel_login'=>$admin_pannel_login,
            'pos_login'=>$pos_login,
            'validator_login'=>$validator_login,
            'e_ktp_reader_login'=>$e_ktp_reader_login,
            'cs_login'=>$cs_login,
            'port_id' => $dataport, 
            'password'  => $password
        );

        // ceck username selain -5
        $check = $this->users_model->select_data($this->_table," where upper(username)=upper('".$post['username']."')  and status not in (-5)" );

        if($this->form_validation->run() == FALSE)
        {
            $response = json_api(0,validation_errors());
        }
        elseif($check->num_rows()>0)
        {
            $response =  json_api(0,'Username Sudah Ada'); 
        }else{  
            $query = $this->global_model->saveData($this->_table, $data);
            if($query){
                $response = json_api(1,'Simpan Data Berhasil');
            }else{
                $response = json_encode($this->db->error()); 
            }
        }

        $this->log_activitytxt->createLog($this->_username, uri_string(), 'ADD', json_encode($data), $response); 
        echo $response;
    }

    public function action_edit(){
        validate_ajax();
        $post = $this->input->post();

        /* validation */
        $this->form_validation
            ->set_rules('id', 'ID User', 'trim|required')
            ->set_rules('first_name', 'Nama Depan', 'trim|required')
            // ->set_rules('last_name', 'Nama Belakang', 'trim|required')
            ->set_rules('username', 'Username', 'trim|required')
            // ->set_rules('phone', 'No Handphone', 'trim|required')
            // ->set_rules('email', 'Email', 'trim|required')
            ->set_rules('port', 'Port', 'trim|required')
            ->set_rules('user_group', 'User Group', 'trim|required');
            // ->set_rules('user_group', 'User Grup', 'trim|required');
        $this->form_validation->set_message('required','%s harus diisi!');

        $id = $this->enc->decode($post['id']);
        $post['port']=='all'?$dataport=null:$dataport=$this->enc->decode($post['port']);
        /* data post */

        $first_name=$this->input->post('first_name');
        $last_name=$this->input->post('last_name'); 
        $phone = $this->input->post('phone');
        $email =$this->input->post('email'); 
        $admin_pannel_login=$this->input->post('login_cms');
        $user_group=$this->input->post('user_group');
        $pos_login=$this->input->post('login_pos');
        $validator_login=$this->input->post('login_validator');
        $e_ktp_reader_login=$this->input->post('login_ektp_reader');
        $cs_login=$this->input->post('login_cs'); 

        $data = array(
            'first_name' => $first_name, 
            'last_name' => $last_name, 
            'port_id' => $dataport,
            'user_group_id' => $user_group,
            'phone' => $phone, 
            'email' => $email,
            'admin_pannel_login'=>$admin_pannel_login,
            'pos_login'=>$pos_login,
            'validator_login'=>$validator_login,
            'e_ktp_reader_login'=>$e_ktp_reader_login,
            'cs_login'=>$cs_login,
            'updated_on'=>date("Y-m-d H:i:s"),
            'updated_by'=>$this->session->userdata('username'),
        );


        $check = $this->global_model->checkData(
            $this->_table,
            array('username' => $post['username']),
            'id',$id
        );

        if($this->form_validation->run() == FALSE){
            $response = json_api(0,validation_errors());
        }
        elseif ($check)
        {
            $response =  json_api(0,'Username '.$post['username'].' Sudah Ada'); 
        }
        else
        {
            $this->db->trans_begin();

            $query = $this->users_model->update_data($this->_table, $data, "id=$id");

            if ($this->db->trans_status() === FALSE)
            {
                $this->db->trans_rollback();
                $response=json_api(0, 'Gagal update data');
            }
            else
            {
                $this->db->trans_commit();
                $response=json_api(1, 'Berhasil update data');
            }   
        }

        $this->log_activitytxt->createLog($this->_username, uri_string(), 'update', json_encode($data), $response); 
        echo $response;
    }

    public function action_reset_password(){
        validate_ajax();
        $post = $this->input->post();

        /* validation */
        $this->form_validation->set_rules('password', 'Password Baru', 'trim|required');
        $this->form_validation->set_message('required','%s harus diisi!');

        $id = $this->enc->decode($post['id']);
        /* data post */
        $data = array(
            'id' => $id, 
            'password' => $this->bcrypt->hash_password(strtoupper(md5($post['password'])))
        );

        if($this->form_validation->run() == FALSE){
            $response = json_api(0,validation_errors());
        }else{
            $query = $this->global_model->updateData($this->_table, $data, 'id');
            if($query){
                $response = json_api(1,'Update Password Berhasil');
            }else{
                $response = json_encode($this->db->error()); 
            }
        }

        $this->log_activitytxt->createLog($this->_username, uri_string(), 'UPDATE', json_encode($data), $response); 
        echo $response;
    }

    public function action_delete($param){
        validate_ajax();
        $id = $this->enc->decode($param);

        /* data */
        $data = array(
            'id' => $id,
            'status' => -5
        );

        $query = $this->global_model->updateData($this->_table, $data, 'id');
        if($query){
            $response = json_api(1,'Delete Data Berhasil');
        }else{
            $response = json_encode($this->db->error()); 
        }

        $this->log_activitytxt->createLog($this->_username, uri_string(), 'DELETE', json_encode($data), $response); 
        echo $response;
    }

    function dropdown_user_group(){
        $datas    = $this->global_model->selectAll('core.t_mtr_user_group');
        $data[''] = '';

        if($datas){
            foreach($datas as $row){
                $data[$row->id] = $row->name;
            }
        }
        
        return $data;
    }


    function select_port(){
        $datas    = $this->global_model->selectAll('app.t_mtr_port');
        $data[''] = '';

        if($datas){
            foreach($datas as $row){
                $data[$row->id] = $row->name;
            }
        }
        
        return $data;
    }

    public function enable($param)
    {
        validate_ajax();
        $p = $this->enc->decode($param);

        $d = explode('|', $p);

        /* data */
        $data = array(
            'status' => $d[1],
            'updated_on'=>date("Y-m-d H:i:s"),
            'updated_by'=>$this->session->userdata('username'),
        );


        $this->db->trans_begin();
        $this->users_model->update_data($this->_table,$data,"id=".$this->enc->decode($d[0]));

        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
            echo $res=json_api(0, 'Gagal aktifkan data');
        }
        else
        {
            $this->db->trans_commit();
            echo $res=json_api(1, 'Berhasil aktifkan data');
        }


        /* Fungsi Create Log */
        $createdBy   = $this->session->userdata('username');
        $logUrl      = site_url().'configuration/user/enable';
        $logMethod   = 'ENABLED';
        $logParam    = json_encode($data);
        $logResponse = $res;

        $this->log_activitytxt->createLog($createdBy, $logUrl, $logMethod, $logParam, $logResponse);
    }

    public function disable($param)
    {
        validate_ajax();
        $p = $this->enc->decode($param);

        $d = explode('|', $p);

        /* data */
        $data = array(
          'status' => $d[1],
          'updated_on'=>date("Y-m-d H:i:s"),
          'updated_by'=>$this->session->userdata('username'),
        );


        $this->db->trans_begin();
        $this->users_model->update_data($this->_table,$data,"id=".$this->enc->decode($d[0]));

        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
            echo $res=json_api(0, 'Gagal dinonaktifkan data');
        }
        else
        {
            $this->db->trans_commit();
            echo $res=json_api(1, 'Data berhasil dinonaktifkan ');
        } 

        /* Fungsi Create Log */
        $createdBy   = $this->session->userdata('username');
        $logUrl      = site_url().'configuration/user/enable';
        $logMethod   = 'DISABLED';
        $logParam    = json_encode($data);
        $logResponse = $res;

        $this->log_activitytxt->createLog($createdBy, $logUrl, $logMethod, $logParam, $logResponse);
    }

    public function download()
    {

        $this->load->library('exceldownload');

        // $code=$this->enc->decode($encode);
        $data=$this->users_model->download()->result();
        $excel = new Exceldownload();
        // Send Header


        $excel->setHeader('Data_User.xls');
        $excel->BOF();



        $excel->writeLabel(0, 0, "NO");
        $excel->writeLabel(0, 1, "NAMA DEPAN");
        $excel->writeLabel(0, 2, "NAMA BELAKANG");
        $excel->writeLabel(0, 3, "USERNAME");
        $excel->writeLabel(0, 4, "GROUP");
        $excel->writeLabel(0, 5, "PELABUHAN");
        $excel->writeLabel(0, 6, "LOGIN CMS");
        $excel->writeLabel(0, 7, "LOGIN VALIDATOR");
        $excel->writeLabel(0, 8, "LOGIN E-KTP READER");
        $excel->writeLabel(0, 9, "LOGIN CS");
        $excel->writeLabel(0, 10, "LOGIN POS");
        $excel->writeLabel(0, 11, "STATUS");


        $index=1;
        foreach ($data as $key => $value) {
            $excel->writeLabel($index,0, $index);
            $excel->writeLabel($index,1, $value->first_name);
            $excel->writeLabel($index,2, $value->last_name);
            $excel->writeLabel($index,3, $value->username);
            $excel->writeLabel($index,4, $value->group_name);
            $excel->writeLabel($index,5, $value->port_name);
            $excel->writeLabel($index,6, $value->admin_pannel_login);
            $excel->writeLabel($index,7, $value->validator_login);
            $excel->writeLabel($index,8, $value->e_ktp_reader_login);
            $excel->writeLabel($index,9, $value->cs_login);
            $excel->writeLabel($index,10, $value->pos_login);
            $excel->writeLabel($index,11, $value->status);



            $index++;
        }
         
        $excel->EOF();
        exit();
    }

    public function download_excel()
    {

        $this->global_model->checkAccessMenuAction($this->_module,'download_excel');

        $data = $this->users_model->download_excel();

        $user_group=$this->enc->decode($this->input->get("user_group"));


        $file_name = 'DATA USER';
        $this->load->library('XLSExcel');
        $styles1 = array('height'=>50, 'widths' => [5,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],'font'=>'Arial','font-size'=>10,'font-style'=>'bold', 'fill'=>'#eee', 'halign'=>'center', 'border'=>'left,right,top,bottom');


        $header = array(
            'NO' =>'string',
            'NAMA DEPAN' =>'string',
            'NAMA BELAKANG' =>'string',
            'USERNAME' =>'string',
            'GROUP' =>'string',
            'PELABUHAN' =>'string',
            'LOGIN CMS' =>'string',
            'LOGIN VALIDATOR' =>'string',
            'LOGIN E-KTP READER' =>'string',
            'LOGIN cs' =>'string',
            'LOGIN POS' =>'string',
            'STATUS' =>'string',
        );

        $no=1;


        foreach ($data as $key => $value) {
            $rows[] = array($no,
                    $value->first_name,
                    $value->last_name,
                    $value->username,
                    $value->group_name,
                    empty($value->port_name)?"Semua Pelabuhan":$value->port_name,
                    $value->admin_pannel_login,
                    $value->validator_login,
                    $value->e_ktp_reader_login,
                    $value->cs_login,
                    $value->pos_login,
                    $value->status,
                );
            $no++;
        }

        $writer = new XLSXWriter();

        $writer->writeSheetHeader('Sheet1', $header,$styles1);

        foreach($rows as $row)
            $writer->writeSheetRow('Sheet1', $row);
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="'.$file_name.'.xlsx"');
        header('Cache-Control: max-age=0');
        $writer->writeToStdOut();
    }


}
